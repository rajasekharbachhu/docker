     docker ps #shows the list of running containers
     docker images
     docker pull httpd
     docker pull mysql
     docker images
     docker ps -a
     docker container create --name=c2 httpd  # c2 is the image name of container
     docker container create --name=c3 httpd
     docker ps -a # it will shows list of stopped and running of containers
     docker start c1
     docker ps -a
     docker start c2
     docker start c3
     docker ps -a
     docker stop c1
     docker stop c2
     docker ps -a
     docker start c1
     docker start c2
     docker ps -a
     docker container create --name=c4 httpd
     docker ps -a
     docker start c4
     docker ps -a
     docker stop c4
     docker ps -a
     docker start c4
     docker ps -a
     docker pause c4
     docker ps -a
     docker unpause c4
     docker ps -a
     docker stop c4
     docker rm c4
     docker ps -a
     docker rm -f c3    # rm is used to delete a container but before using these command sure container should not be in running.
     docker rm -f c2
     docker stop c1
     docker rm c1
     # container create  + start = run
     docker run -d --name=c1 httpd
     docker ps -a
     docker images
     docker run -d --name=c2 nginx:latest
     docker ps
     # inspect container - Get full docker info in json format
     # find iP addresss by using grep
     # login
     docker ps
     docker inspect c2 
     docker inspect c2 | grep -i ipaddr  #for linux machines
     docker inspect c2 | findstr -i ipaddr #for windows machines
     curl  "172.17.0.3" #Linux VM
     clear
     docker exec -it c1 bash
     docker exec -it c2 bash
     cure 172.17.0.3
     curl 172.17.0.3
     docker run -d --name=web1 -p 9090:80  httpd
     docker ps
     docker run -d --name=web1 -p 9091:80 nginx
     docker run -d --name=web2 -p 9091:80 nginx
     clear
--------------------------------------------------------------------------------------
      docker installation for linux vm
      sudo apt-get update
      sudo apt-get install ca-certificates curl gnupg
      sudo install -m 0755 -d /etc/apt/keyrings
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      sudo chmod a+r /etc/apt/keyrings/docker.gpg
      echo   "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" |   sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      sudo apt-get update
      sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
------------------------------------------------------------------------------------------------------------------------------

     docker ps
     clear
     ip a s                       # LC
     brctl show                   #LC
     apt install bridge-utils     #LC
     brctl show                   #LC
     clear
     docker network ls            #List docker networks
     docker inspect 6d2390c211ff
     clear
     docker network create --subnet=99.99.99.0/24 --driver=bridge net1
     docker network ls
     docker inspect 9b694deffcf8
     clear
     docker run -d --name=n1 --network net1 --ip=99.99.99.2 --cpus="0.0000001" --memory=18M --hostname=net1.samosa.com -p 9090:80 httpd
     docker ps
     brctl show
     ip a s
     docker run -d --name=n2 --network net1 --ip=99.99.99.3 --cpus="0.0000001" --memory=18M --hostname=net2.samosa.com -p 9091:80 httpd
     brctl show
     ip a s
     docker run -d --name=c1 httpd
     ip a s
     brctl show
     docker ps
     docker inpsect c1 | grep -i ipaddr
     docker inspect c1 | grep -i ipaddr
     docker inspect n1 | grep -i ipaddr
     docker inspect n2 | grep -i ipaddr
     docker exec -it c1 bash
     docker run -d --name=c2 httpd
     docker inspect c2 | grep -i ipaddr
     docker exec -it c1 bash

     docker volume create v1
     docker volume ls
     docker run -d --name=db1 -v v1:/var/lib/mysql -v /data:/data -p 9096:80 -e MYSQL_ROOT_PASSWORD=123 mysql

     mkdir -p /data
     cd /data/
     echo "I like Idli So Much..." > index.html
     ls
     docker run -d --name=v1 -v /data:/usr/share/nginx/html -p 9094:80 nginx
     ls
     echo "I like GulabJamun" > index.html
     docker rm -f v1
     docker run -d --name=v1 -v /data:/usr/share/nginx/html -p 9094:80 nginx
     echo "I like GulabJamun100" > index.html
     clear

     docker volume ls
     docker volume create v1
     docker volume ls
     docker run -d --name=db1 -v v1:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123 mysql
     docker ps
     docker exec -it db1 bash


     docker run -d --name=db1 -v v1:/var/lib/mysql -v /data:/data -p 9096:80 -e MYSQL_ROOT_PASSWORD=123 mysql
     docker ps
     docker exec -it db1 bash
     clear

     docker volume ls
     docker ps

     docker rm -f db1
     docker volume ls
     docker run -d --name=db2 -v v1:/var/lib/mysql -p 3309:3306 -e MYSQL_ROOT_PASSWORD=123 mysql
     docker ps -a
     docker exec -it db2 bash

     docker run -d --name=t1 --tmpfs /samosa httpd

     mkdir /dockerfiles
     cd /dockerfiles/
     ls
     touch 1.df one.dockerfile dockerfile
     ls
     vi 1.df
     cat 1.df
     touch 1.tar 1.txt index.html
     echo "Working with Dockerfiles" > index.html
     docker build . -f 1.df  -t webserver:demo
     vi 1.df
    docker build . -f 1.df  -t webserver:demo
    vi 1.df
    docker build . -f 1.df  -t webserver:demo
    vi 1.df
    docker build . -f 1.df  -t webserver:demo
    vi 1.df
    docker build . -f 1.df  -t webserver:demo
    docker images
    docker run -d --name=i1 -p 9099:80 webserver:demo
    docker ps
